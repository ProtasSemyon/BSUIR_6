; ModuleID = 'src/Table.c'
source_filename = "src/Table.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.Table = type { [1000 x %struct.Column], [1000 x %struct.Row], i64, i64 }
%struct.Column = type { ptr }
%struct.Row = type { [1000 x ptr], i64 }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define dso_local void @createTable(ptr noalias sret(%struct.Table) align 8 %0, ptr noundef %1, i64 noundef %2) #0 {
  %4 = alloca ptr, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  store ptr %1, ptr %4, align 8
  store i64 %2, ptr %5, align 8
  %7 = getelementptr inbounds %struct.Table, ptr %0, i32 0, i32 3
  store i64 0, ptr %7, align 8
  %8 = getelementptr inbounds %struct.Table, ptr %0, i32 0, i32 2
  store i64 0, ptr %8, align 8
  store i32 0, ptr %6, align 4
  br label %9

9:                                                ; preds = %21, %3
  %10 = load i32, ptr %6, align 4
  %11 = sext i32 %10 to i64
  %12 = load i64, ptr %5, align 8
  %13 = icmp ult i64 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %9
  %15 = load ptr, ptr %4, align 8
  %16 = load i32, ptr %6, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds %struct.Column, ptr %15, i64 %17
  %19 = getelementptr inbounds %struct.Column, ptr %18, i32 0, i32 0
  %20 = load ptr, ptr %19, align 8
  call void @insertColumn(ptr noundef %0, ptr %20)
  br label %21

21:                                               ; preds = %14
  %22 = load i32, ptr %6, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, ptr %6, align 4
  br label %9, !llvm.loop !6

24:                                               ; preds = %9
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define dso_local void @insertColumn(ptr noundef %0, ptr %1) #0 {
  %3 = alloca %struct.Column, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i32, align 4
  %6 = getelementptr inbounds %struct.Column, ptr %3, i32 0, i32 0
  store ptr %1, ptr %6, align 8
  store ptr %0, ptr %4, align 8
  %7 = load ptr, ptr %4, align 8
  %8 = getelementptr inbounds %struct.Table, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %4, align 8
  %10 = getelementptr inbounds %struct.Table, ptr %9, i32 0, i32 3
  %11 = load i64, ptr %10, align 8
  %12 = getelementptr inbounds [1000 x %struct.Column], ptr %8, i64 0, i64 %11
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %12, ptr align 8 %3, i64 8, i1 false)
  %13 = load ptr, ptr %4, align 8
  %14 = getelementptr inbounds %struct.Table, ptr %13, i32 0, i32 3
  %15 = load i64, ptr %14, align 8
  %16 = add i64 %15, 1
  store i64 %16, ptr %14, align 8
  store i32 0, ptr %5, align 4
  br label %17

17:                                               ; preds = %30, %2
  %18 = load i32, ptr %5, align 4
  %19 = sext i32 %18 to i64
  %20 = load ptr, ptr %4, align 8
  %21 = getelementptr inbounds %struct.Table, ptr %20, i32 0, i32 2
  %22 = load i64, ptr %21, align 8
  %23 = icmp ult i64 %19, %22
  br i1 %23, label %24, label %33

24:                                               ; preds = %17
  %25 = load ptr, ptr %4, align 8
  %26 = getelementptr inbounds %struct.Table, ptr %25, i32 0, i32 1
  %27 = load i32, ptr %5, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [1000 x %struct.Row], ptr %26, i64 0, i64 %28
  call void @addElementToRow(ptr noundef %29, ptr noundef @.str)
  br label %30

30:                                               ; preds = %24
  %31 = load i32, ptr %5, align 4
  %32 = add nsw i32 %31, 1
  store i32 %32, ptr %5, align 4
  br label %17, !llvm.loop !8

33:                                               ; preds = %17
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define dso_local void @insertRow(ptr noundef %0, ptr noundef byval(%struct.Row) align 8 %1) #0 {
  %3 = alloca ptr, align 8
  %4 = alloca %struct.Row, align 8
  %5 = alloca i32, align 4
  store ptr %0, ptr %3, align 8
  store i32 0, ptr %5, align 4
  br label %6

6:                                                ; preds = %19, %2
  %7 = load i32, ptr %5, align 4
  %8 = sext i32 %7 to i64
  %9 = load ptr, ptr %3, align 8
  %10 = getelementptr inbounds %struct.Table, ptr %9, i32 0, i32 3
  %11 = load i64, ptr %10, align 8
  %12 = icmp ult i64 %8, %11
  br i1 %12, label %13, label %22

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.Row, ptr %1, i32 0, i32 0
  %15 = load i32, ptr %5, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [1000 x ptr], ptr %14, i64 0, i64 %16
  %18 = load ptr, ptr %17, align 8
  call void @addElementToRow(ptr noundef %4, ptr noundef %18)
  br label %19

19:                                               ; preds = %13
  %20 = load i32, ptr %5, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %5, align 4
  br label %6, !llvm.loop !9

22:                                               ; preds = %6
  %23 = load ptr, ptr %3, align 8
  %24 = getelementptr inbounds %struct.Table, ptr %23, i32 0, i32 1
  %25 = load ptr, ptr %3, align 8
  %26 = getelementptr inbounds %struct.Table, ptr %25, i32 0, i32 2
  %27 = load i64, ptr %26, align 8
  %28 = getelementptr inbounds [1000 x %struct.Row], ptr %24, i64 0, i64 %27
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %28, ptr align 8 %4, i64 8008, i1 false)
  %29 = load ptr, ptr %3, align 8
  %30 = getelementptr inbounds %struct.Table, ptr %29, i32 0, i32 2
  %31 = load i64, ptr %30, align 8
  %32 = add i64 %31, 1
  store i64 %32, ptr %30, align 8
  ret void
}

declare void @addElementToRow(ptr noundef, ptr noundef) #1

; Function Attrs: argmemonly nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define dso_local void @insertElement(ptr noundef %0, ptr %1, i64 noundef %2, ptr noundef %3) #0 {
  %5 = alloca %struct.Column, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i64, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = getelementptr inbounds %struct.Column, ptr %5, i32 0, i32 0
  store ptr %1, ptr %11, align 8
  store ptr %0, ptr %6, align 8
  store i64 %2, ptr %7, align 8
  store ptr %3, ptr %8, align 8
  store i32 -1, ptr %9, align 4
  store i32 0, ptr %10, align 4
  br label %12

12:                                               ; preds = %37, %4
  %13 = load i32, ptr %10, align 4
  %14 = sext i32 %13 to i64
  %15 = load ptr, ptr %6, align 8
  %16 = getelementptr inbounds %struct.Table, ptr %15, i32 0, i32 3
  %17 = load i64, ptr %16, align 8
  %18 = icmp ult i64 %14, %17
  br i1 %18, label %19, label %40

19:                                               ; preds = %12
  %20 = load ptr, ptr %6, align 8
  %21 = getelementptr inbounds %struct.Table, ptr %20, i32 0, i32 0
  %22 = load i32, ptr %10, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [1000 x %struct.Column], ptr %21, i64 0, i64 %23
  %25 = getelementptr inbounds %struct.Column, ptr %24, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %27 = load i8, ptr %26, align 1
  %28 = sext i8 %27 to i32
  %29 = getelementptr inbounds %struct.Column, ptr %5, i32 0, i32 0
  %30 = load ptr, ptr %29, align 8
  %31 = load i8, ptr %30, align 1
  %32 = sext i8 %31 to i32
  %33 = icmp eq i32 %28, %32
  br i1 %33, label %34, label %36

34:                                               ; preds = %19
  %35 = load i32, ptr %10, align 4
  store i32 %35, ptr %9, align 4
  br label %36

36:                                               ; preds = %34, %19
  br label %37

37:                                               ; preds = %36
  %38 = load i32, ptr %10, align 4
  %39 = add nsw i32 %38, 1
  store i32 %39, ptr %10, align 4
  br label %12, !llvm.loop !10

40:                                               ; preds = %12
  %41 = load i32, ptr %9, align 4
  %42 = icmp eq i32 %41, -1
  br i1 %42, label %49, label %43

43:                                               ; preds = %40
  %44 = load i64, ptr %7, align 8
  %45 = load ptr, ptr %6, align 8
  %46 = getelementptr inbounds %struct.Table, ptr %45, i32 0, i32 2
  %47 = load i64, ptr %46, align 8
  %48 = icmp uge i64 %44, %47
  br i1 %48, label %49, label %50

49:                                               ; preds = %43, %40
  br label %60

50:                                               ; preds = %43
  %51 = load ptr, ptr %8, align 8
  %52 = load ptr, ptr %6, align 8
  %53 = getelementptr inbounds %struct.Table, ptr %52, i32 0, i32 1
  %54 = load i64, ptr %7, align 8
  %55 = getelementptr inbounds [1000 x %struct.Row], ptr %53, i64 0, i64 %54
  %56 = getelementptr inbounds %struct.Row, ptr %55, i32 0, i32 0
  %57 = load i32, ptr %9, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [1000 x ptr], ptr %56, i64 0, i64 %58
  store ptr %51, ptr %59, align 8
  br label %60

60:                                               ; preds = %50, %49
  ret void
}

attributes #0 = { noinline nounwind optnone sspstrong uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { argmemonly nocallback nofree nounwind willreturn }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 15.0.7"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !7}
